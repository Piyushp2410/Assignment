Topic- SQL Task-1

Table:- Employee

CREATE TABLE employee (
    em_id int PRIMARY KEY AUTO_INCREMENT,
    first_name varchar (255),
    LAST_name varchar (255),
    salary bigint,
    Joining_date date,
    department varchar (255)
)

INSERT INTO employee (first_name,LAST_name,salary,joining_date,department)
VALUES ('JOHN', 'ABRAHAM', '1000000', '2013-01-01', 'BANKING'),
('MICHAEL', 'CLERK', '800000', '2013-01-01', 'INSURANCE'),
('ROY', 'THOMAS', '700000', '2013-02-01', 'BANKING'),
('TOM', 'JOSE', '600000', '2013-02-01', 'INSURANCE'),
('JERRY', 'PINTO', '650000', '2013-01-01', 'INSURANCE'),
('PHILIP', 'MATHEW', '750000', '2013-01-01', 'SERVICES'),
('TESTNAME1', '123', '650000', '2013-01-01', 'SERVICES'),
('TESTNAME2', 'LNAME%', '600000', '2013-02-01', 'INSURANCE');


Table:- Incentives

CREATE TABLE incentives (
incentive_id int PRIMARY KEY AUTO_INCREMENT,
employee_ref_id int PRIMARY,
incentive_date date,
incentive_amt bigint
)


INSERT INTO incentives (employee_ref_id,incentive_date,incentive_amt)
VALUES ('1', '2013-02-01', '5000'),
('2', '2013-02-01', '3000'),
('3', '2013-02-01', '4000'),
('1', '2013-01-01', '4500'),
('2', '2013-01-01', '3500');


a) Get First_Name from employee table using alias name “Employee Name”. 
ans. SELECT First_Name AS "Employee Name"
     FROM employee;

b) Get FIRST_NAME, Joining year, Joining Month and Joining Date from employee table.
ans. SELECT
      FIRST_NAME,
      Joining_date
      FROM employee;

c) Get all employee details from the employee table order by First Name Ascending And Salary descending? 
ans.  SELECT *
         FROM employee
         ORDER BY First_Name ASC, Salary DESC;

d) Get employee details from employee table whose first name contains „o‟. 
ans.  SELECT *
        FROM employee
        WHERE First_Name LIKE '%o%';

e) Get employee details from employee table whose joining month is “January”. 
ans. SELECT * FROM employee
       WHERE MONTH(joining_date) = 1;

f) Get department, total salary with respect to a department from employee table Order By total salary descending.
ans. SELECT department, SUM(salary) AS total_salary
        FROM employee
        GROUP BY department
        ORDER BY total_salary DESC;

g) Get department wise maximum salary from employee table order by salary ascending?
ans. SELECT department, MAX(salary) AS max_salary
        FROM employee
        GROUP BY department
        ORDER BY max_salary ASC;

h) Select first_name, incentive amount from employee and incentives table for those Employees who have incentives and incentive amount greater than 3000.
ans. 

i) Select 2nd Highest salary from employee table.
ans. SELECT DISTINCT salary
        FROM employee
        ORDER BY salary DESC
        LIMIT 1 OFFSET 1;

j) Select first_name, incentive amount from employee and incentives table for all Employees who got incentives using left join.
ans.  SELECT*
        from employee AS employee
        LEFT JOIN incentives AS incentives
        ON employee.first_name=incentives.incentive_amt;

k) Create View OF Employee table in which store first name, last name and salary only.
ans. CREATE VIEW EmployeeView AS
       SELECT first_name, last_name, salary
       FROM Employee;

l) Create Procedure to find out department wise highest salary. 
ans. DELIMITER //

              CREATE PROCEDURE DepartmentWiseHighestSalary()
              BEGIN
                  SELECT department_id, MAX(salary) AS highest_salary
                  FROM Employee
                  GROUP BY department_id;
          END //

     DELIMITER ;

m) Create after Insert trigger on Employee table which insert records in view table.
ans. DELIMITER //  CREATE TRIGGER AfterEmployeeInsert
                       AFTER INSERT
                       ON Employee
                       FOR EACH ROW
                       BEGIN
                            INSERT INTO EmployeeView (first_name, last_name, salary)
                            VALUES (NEW.first_name, NEW.last_name, NEW.salary);
          END //

     DELIMITER ;

